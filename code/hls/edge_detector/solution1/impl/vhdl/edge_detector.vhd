-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity edge_detector is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    src_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    src_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    src_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    src_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    src_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    src_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    src_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    dst_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    dst_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
    dst_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
    dst_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    dst_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    dst_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    dst_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    src_TVALID : IN STD_LOGIC;
    src_TREADY : OUT STD_LOGIC;
    dst_TVALID : OUT STD_LOGIC;
    dst_TREADY : IN STD_LOGIC );
end;


architecture behav of edge_detector is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "edge_detector,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z015clg485-2,HLS_INPUT_CLOCK=6.666000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=7.656000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=6,HLS_SYN_DSP=13,HLS_SYN_FF=4446,HLS_SYN_LUT=6258,HLS_VERSION=2018_3}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal threshold : STD_LOGIC_VECTOR (7 downto 0);
    signal Block_proc232_U0_ap_start : STD_LOGIC;
    signal Block_proc232_U0_ap_done : STD_LOGIC;
    signal Block_proc232_U0_ap_continue : STD_LOGIC;
    signal Block_proc232_U0_ap_idle : STD_LOGIC;
    signal Block_proc232_U0_ap_ready : STD_LOGIC;
    signal Block_proc232_U0_start_out : STD_LOGIC;
    signal Block_proc232_U0_start_write : STD_LOGIC;
    signal Block_proc232_U0_srcImg_rows_V_out_din : STD_LOGIC_VECTOR (11 downto 0);
    signal Block_proc232_U0_srcImg_rows_V_out_write : STD_LOGIC;
    signal Block_proc232_U0_srcImg_cols_V_out_din : STD_LOGIC_VECTOR (11 downto 0);
    signal Block_proc232_U0_srcImg_cols_V_out_write : STD_LOGIC;
    signal Block_proc232_U0_threshold_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Block_proc232_U0_threshold_out_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_start : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_done : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_continue : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_idle : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_ready : STD_LOGIC;
    signal AXIvideo2Mat_U0_start_out : STD_LOGIC;
    signal AXIvideo2Mat_U0_start_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_src_TREADY : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_rows_V_read : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_cols_V_read : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_U0_img_data_stream_0_V_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_U0_img_data_stream_1_V_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_U0_img_data_stream_2_V_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_rows_V_out_din : STD_LOGIC_VECTOR (11 downto 0);
    signal AXIvideo2Mat_U0_img_rows_V_out_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_cols_V_out_din : STD_LOGIC_VECTOR (11 downto 0);
    signal AXIvideo2Mat_U0_img_cols_V_out_write : STD_LOGIC;
    signal CvtColor_U0_ap_start : STD_LOGIC;
    signal CvtColor_U0_ap_done : STD_LOGIC;
    signal CvtColor_U0_ap_continue : STD_LOGIC;
    signal CvtColor_U0_ap_idle : STD_LOGIC;
    signal CvtColor_U0_ap_ready : STD_LOGIC;
    signal CvtColor_U0_start_out : STD_LOGIC;
    signal CvtColor_U0_start_write : STD_LOGIC;
    signal CvtColor_U0_p_src_rows_V_read : STD_LOGIC;
    signal CvtColor_U0_p_src_cols_V_read : STD_LOGIC;
    signal CvtColor_U0_p_src_data_stream_0_V_read : STD_LOGIC;
    signal CvtColor_U0_p_src_data_stream_1_V_read : STD_LOGIC;
    signal CvtColor_U0_p_src_data_stream_2_V_read : STD_LOGIC;
    signal CvtColor_U0_p_dst_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal CvtColor_U0_p_dst_data_stream_V_write : STD_LOGIC;
    signal Duplicate_U0_ap_start : STD_LOGIC;
    signal Duplicate_U0_start_full_n : STD_LOGIC;
    signal Duplicate_U0_ap_done : STD_LOGIC;
    signal Duplicate_U0_ap_continue : STD_LOGIC;
    signal Duplicate_U0_ap_idle : STD_LOGIC;
    signal Duplicate_U0_ap_ready : STD_LOGIC;
    signal Duplicate_U0_start_out : STD_LOGIC;
    signal Duplicate_U0_start_write : STD_LOGIC;
    signal Duplicate_U0_src_data_stream_V_read : STD_LOGIC;
    signal Duplicate_U0_dst1_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Duplicate_U0_dst1_data_stream_V_write : STD_LOGIC;
    signal Duplicate_U0_dst2_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Duplicate_U0_dst2_data_stream_V_write : STD_LOGIC;
    signal Filter2D102_U0_ap_start : STD_LOGIC;
    signal Filter2D102_U0_ap_done : STD_LOGIC;
    signal Filter2D102_U0_ap_continue : STD_LOGIC;
    signal Filter2D102_U0_ap_idle : STD_LOGIC;
    signal Filter2D102_U0_ap_ready : STD_LOGIC;
    signal Filter2D102_U0_start_out : STD_LOGIC;
    signal Filter2D102_U0_start_write : STD_LOGIC;
    signal Filter2D102_U0_p_src_data_stream_V_read : STD_LOGIC;
    signal Filter2D102_U0_p_dst_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Filter2D102_U0_p_dst_data_stream_V_write : STD_LOGIC;
    signal Filter2D_U0_ap_start : STD_LOGIC;
    signal Filter2D_U0_ap_done : STD_LOGIC;
    signal Filter2D_U0_ap_continue : STD_LOGIC;
    signal Filter2D_U0_ap_idle : STD_LOGIC;
    signal Filter2D_U0_ap_ready : STD_LOGIC;
    signal Filter2D_U0_p_src_data_stream_V_read : STD_LOGIC;
    signal Filter2D_U0_p_dst_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Filter2D_U0_p_dst_data_stream_V_write : STD_LOGIC;
    signal AddWeighted_U0_ap_start : STD_LOGIC;
    signal AddWeighted_U0_ap_done : STD_LOGIC;
    signal AddWeighted_U0_ap_continue : STD_LOGIC;
    signal AddWeighted_U0_ap_idle : STD_LOGIC;
    signal AddWeighted_U0_ap_ready : STD_LOGIC;
    signal AddWeighted_U0_src1_data_stream_V_read : STD_LOGIC;
    signal AddWeighted_U0_src2_data_stream_V_read : STD_LOGIC;
    signal AddWeighted_U0_dst_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AddWeighted_U0_dst_data_stream_V_write : STD_LOGIC;
    signal thresholding_U0_ap_start : STD_LOGIC;
    signal thresholding_U0_ap_done : STD_LOGIC;
    signal thresholding_U0_ap_continue : STD_LOGIC;
    signal thresholding_U0_ap_idle : STD_LOGIC;
    signal thresholding_U0_ap_ready : STD_LOGIC;
    signal thresholding_U0_start_out : STD_LOGIC;
    signal thresholding_U0_start_write : STD_LOGIC;
    signal thresholding_U0_dst_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal thresholding_U0_dst_data_stream_V_write : STD_LOGIC;
    signal thresholding_U0_src_data_stream_V_read : STD_LOGIC;
    signal thresholding_U0_threshold_read : STD_LOGIC;
    signal CvtColor_1_U0_ap_start : STD_LOGIC;
    signal CvtColor_1_U0_ap_done : STD_LOGIC;
    signal CvtColor_1_U0_ap_continue : STD_LOGIC;
    signal CvtColor_1_U0_ap_idle : STD_LOGIC;
    signal CvtColor_1_U0_ap_ready : STD_LOGIC;
    signal CvtColor_1_U0_start_out : STD_LOGIC;
    signal CvtColor_1_U0_start_write : STD_LOGIC;
    signal CvtColor_1_U0_p_src_data_stream_V_read : STD_LOGIC;
    signal CvtColor_1_U0_p_dst_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal CvtColor_1_U0_p_dst_data_stream_0_V_write : STD_LOGIC;
    signal CvtColor_1_U0_p_dst_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal CvtColor_1_U0_p_dst_data_stream_1_V_write : STD_LOGIC;
    signal CvtColor_1_U0_p_dst_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal CvtColor_1_U0_p_dst_data_stream_2_V_write : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_start : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_done : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_continue : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_idle : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_ready : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_data_stream_0_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_data_stream_1_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_data_stream_2_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_dst_TDATA : STD_LOGIC_VECTOR (23 downto 0);
    signal Mat2AXIvideo_U0_dst_TVALID : STD_LOGIC;
    signal Mat2AXIvideo_U0_dst_TKEEP : STD_LOGIC_VECTOR (2 downto 0);
    signal Mat2AXIvideo_U0_dst_TSTRB : STD_LOGIC_VECTOR (2 downto 0);
    signal Mat2AXIvideo_U0_dst_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_dst_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_dst_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_dst_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal srcImg_rows_V_c_full_n : STD_LOGIC;
    signal srcImg_rows_V_c_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal srcImg_rows_V_c_empty_n : STD_LOGIC;
    signal srcImg_cols_V_c_full_n : STD_LOGIC;
    signal srcImg_cols_V_c_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal srcImg_cols_V_c_empty_n : STD_LOGIC;
    signal threshold_c_full_n : STD_LOGIC;
    signal threshold_c_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal threshold_c_empty_n : STD_LOGIC;
    signal srcImg_data_stream_0_full_n : STD_LOGIC;
    signal srcImg_data_stream_0_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal srcImg_data_stream_0_empty_n : STD_LOGIC;
    signal srcImg_data_stream_1_full_n : STD_LOGIC;
    signal srcImg_data_stream_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal srcImg_data_stream_1_empty_n : STD_LOGIC;
    signal srcImg_data_stream_2_full_n : STD_LOGIC;
    signal srcImg_data_stream_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal srcImg_data_stream_2_empty_n : STD_LOGIC;
    signal srcImg_rows_V_c20_full_n : STD_LOGIC;
    signal srcImg_rows_V_c20_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal srcImg_rows_V_c20_empty_n : STD_LOGIC;
    signal srcImg_cols_V_c21_full_n : STD_LOGIC;
    signal srcImg_cols_V_c21_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal srcImg_cols_V_c21_empty_n : STD_LOGIC;
    signal grayImg_data_stream_s_full_n : STD_LOGIC;
    signal grayImg_data_stream_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal grayImg_data_stream_s_empty_n : STD_LOGIC;
    signal split0_data_stream_0_full_n : STD_LOGIC;
    signal split0_data_stream_0_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal split0_data_stream_0_empty_n : STD_LOGIC;
    signal split1_data_stream_0_full_n : STD_LOGIC;
    signal split1_data_stream_0_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal split1_data_stream_0_empty_n : STD_LOGIC;
    signal sobelImg_x_data_stre_full_n : STD_LOGIC;
    signal sobelImg_x_data_stre_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal sobelImg_x_data_stre_empty_n : STD_LOGIC;
    signal sobelImg_y_data_stre_full_n : STD_LOGIC;
    signal sobelImg_y_data_stre_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal sobelImg_y_data_stre_empty_n : STD_LOGIC;
    signal sobelImg_data_stream_full_n : STD_LOGIC;
    signal sobelImg_data_stream_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal sobelImg_data_stream_empty_n : STD_LOGIC;
    signal thresholdImg_data_st_full_n : STD_LOGIC;
    signal thresholdImg_data_st_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal thresholdImg_data_st_empty_n : STD_LOGIC;
    signal rgbSobel_data_stream_full_n : STD_LOGIC;
    signal rgbSobel_data_stream_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal rgbSobel_data_stream_empty_n : STD_LOGIC;
    signal rgbSobel_data_stream_1_full_n : STD_LOGIC;
    signal rgbSobel_data_stream_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal rgbSobel_data_stream_1_empty_n : STD_LOGIC;
    signal rgbSobel_data_stream_2_full_n : STD_LOGIC;
    signal rgbSobel_data_stream_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal rgbSobel_data_stream_2_empty_n : STD_LOGIC;
    signal start_for_thresholding_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_thresholding_U0_full_n : STD_LOGIC;
    signal start_for_thresholding_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_thresholding_U0_empty_n : STD_LOGIC;
    signal start_for_CvtColor_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_CvtColor_U0_full_n : STD_LOGIC;
    signal start_for_CvtColor_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_CvtColor_U0_empty_n : STD_LOGIC;
    signal start_for_Duplicate_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Duplicate_U0_full_n : STD_LOGIC;
    signal start_for_Duplicate_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Duplicate_U0_empty_n : STD_LOGIC;
    signal start_for_Filter2D102_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Filter2D102_U0_full_n : STD_LOGIC;
    signal start_for_Filter2D102_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Filter2D102_U0_empty_n : STD_LOGIC;
    signal start_for_Filter2D_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Filter2D_U0_full_n : STD_LOGIC;
    signal start_for_Filter2D_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Filter2D_U0_empty_n : STD_LOGIC;
    signal start_for_AddWeighted_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_AddWeighted_U0_full_n : STD_LOGIC;
    signal start_for_AddWeighted_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_AddWeighted_U0_empty_n : STD_LOGIC;
    signal Filter2D_U0_start_full_n : STD_LOGIC;
    signal Filter2D_U0_start_write : STD_LOGIC;
    signal AddWeighted_U0_start_full_n : STD_LOGIC;
    signal AddWeighted_U0_start_write : STD_LOGIC;
    signal start_for_CvtColor_1_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_CvtColor_1_U0_full_n : STD_LOGIC;
    signal start_for_CvtColor_1_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_CvtColor_1_U0_empty_n : STD_LOGIC;
    signal start_for_Mat2AXIvideo_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Mat2AXIvideo_U0_full_n : STD_LOGIC;
    signal start_for_Mat2AXIvideo_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Mat2AXIvideo_U0_empty_n : STD_LOGIC;
    signal Mat2AXIvideo_U0_start_full_n : STD_LOGIC;
    signal Mat2AXIvideo_U0_start_write : STD_LOGIC;

    component Block_proc232 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        threshold : IN STD_LOGIC_VECTOR (7 downto 0);
        srcImg_rows_V_out_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        srcImg_rows_V_out_full_n : IN STD_LOGIC;
        srcImg_rows_V_out_write : OUT STD_LOGIC;
        srcImg_cols_V_out_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        srcImg_cols_V_out_full_n : IN STD_LOGIC;
        srcImg_cols_V_out_write : OUT STD_LOGIC;
        threshold_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        threshold_out_full_n : IN STD_LOGIC;
        threshold_out_write : OUT STD_LOGIC );
    end component;


    component AXIvideo2Mat IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        src_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
        src_TVALID : IN STD_LOGIC;
        src_TREADY : OUT STD_LOGIC;
        src_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
        src_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
        src_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        src_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        src_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        src_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        img_rows_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        img_rows_V_empty_n : IN STD_LOGIC;
        img_rows_V_read : OUT STD_LOGIC;
        img_cols_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        img_cols_V_empty_n : IN STD_LOGIC;
        img_cols_V_read : OUT STD_LOGIC;
        img_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_0_V_full_n : IN STD_LOGIC;
        img_data_stream_0_V_write : OUT STD_LOGIC;
        img_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_1_V_full_n : IN STD_LOGIC;
        img_data_stream_1_V_write : OUT STD_LOGIC;
        img_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_2_V_full_n : IN STD_LOGIC;
        img_data_stream_2_V_write : OUT STD_LOGIC;
        img_rows_V_out_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        img_rows_V_out_full_n : IN STD_LOGIC;
        img_rows_V_out_write : OUT STD_LOGIC;
        img_cols_V_out_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        img_cols_V_out_full_n : IN STD_LOGIC;
        img_cols_V_out_write : OUT STD_LOGIC );
    end component;


    component CvtColor IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        p_src_rows_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        p_src_rows_V_empty_n : IN STD_LOGIC;
        p_src_rows_V_read : OUT STD_LOGIC;
        p_src_cols_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        p_src_cols_V_empty_n : IN STD_LOGIC;
        p_src_cols_V_read : OUT STD_LOGIC;
        p_src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_0_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_0_V_read : OUT STD_LOGIC;
        p_src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_1_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_1_V_read : OUT STD_LOGIC;
        p_src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_2_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_2_V_read : OUT STD_LOGIC;
        p_dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component Duplicate IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_V_empty_n : IN STD_LOGIC;
        src_data_stream_V_read : OUT STD_LOGIC;
        dst1_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst1_data_stream_V_full_n : IN STD_LOGIC;
        dst1_data_stream_V_write : OUT STD_LOGIC;
        dst2_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst2_data_stream_V_full_n : IN STD_LOGIC;
        dst2_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component Filter2D102 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        p_src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_V_read : OUT STD_LOGIC;
        p_dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component Filter2D IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_V_read : OUT STD_LOGIC;
        p_dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component AddWeighted IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src1_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src1_data_stream_V_empty_n : IN STD_LOGIC;
        src1_data_stream_V_read : OUT STD_LOGIC;
        src2_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src2_data_stream_V_empty_n : IN STD_LOGIC;
        src2_data_stream_V_read : OUT STD_LOGIC;
        dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_V_full_n : IN STD_LOGIC;
        dst_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component thresholding IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_V_full_n : IN STD_LOGIC;
        dst_data_stream_V_write : OUT STD_LOGIC;
        src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_V_empty_n : IN STD_LOGIC;
        src_data_stream_V_read : OUT STD_LOGIC;
        threshold_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        threshold_empty_n : IN STD_LOGIC;
        threshold_read : OUT STD_LOGIC );
    end component;


    component CvtColor_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        p_src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_V_read : OUT STD_LOGIC;
        p_dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_0_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_0_V_write : OUT STD_LOGIC;
        p_dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_1_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_1_V_write : OUT STD_LOGIC;
        p_dst_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_2_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_2_V_write : OUT STD_LOGIC );
    end component;


    component Mat2AXIvideo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_0_V_empty_n : IN STD_LOGIC;
        img_data_stream_0_V_read : OUT STD_LOGIC;
        img_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_1_V_empty_n : IN STD_LOGIC;
        img_data_stream_1_V_read : OUT STD_LOGIC;
        img_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_2_V_empty_n : IN STD_LOGIC;
        img_data_stream_2_V_read : OUT STD_LOGIC;
        dst_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
        dst_TVALID : OUT STD_LOGIC;
        dst_TREADY : IN STD_LOGIC;
        dst_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
        dst_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
        dst_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        dst_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        dst_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        dst_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fifo_w12_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d7_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_threshopcA IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_CvtColoqcK IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_DuplicarcU IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Filter2sc4 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Filter2tde IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_AddWeigudo IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_CvtColovdy IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Mat2AXIwdI IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component edge_detector_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        threshold : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    edge_detector_AXILiteS_s_axi_U : component edge_detector_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        threshold => threshold);

    Block_proc232_U0 : component Block_proc232
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Block_proc232_U0_ap_start,
        start_full_n => start_for_thresholding_U0_full_n,
        ap_done => Block_proc232_U0_ap_done,
        ap_continue => Block_proc232_U0_ap_continue,
        ap_idle => Block_proc232_U0_ap_idle,
        ap_ready => Block_proc232_U0_ap_ready,
        start_out => Block_proc232_U0_start_out,
        start_write => Block_proc232_U0_start_write,
        threshold => threshold,
        srcImg_rows_V_out_din => Block_proc232_U0_srcImg_rows_V_out_din,
        srcImg_rows_V_out_full_n => srcImg_rows_V_c_full_n,
        srcImg_rows_V_out_write => Block_proc232_U0_srcImg_rows_V_out_write,
        srcImg_cols_V_out_din => Block_proc232_U0_srcImg_cols_V_out_din,
        srcImg_cols_V_out_full_n => srcImg_cols_V_c_full_n,
        srcImg_cols_V_out_write => Block_proc232_U0_srcImg_cols_V_out_write,
        threshold_out_din => Block_proc232_U0_threshold_out_din,
        threshold_out_full_n => threshold_c_full_n,
        threshold_out_write => Block_proc232_U0_threshold_out_write);

    AXIvideo2Mat_U0 : component AXIvideo2Mat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => AXIvideo2Mat_U0_ap_start,
        start_full_n => start_for_CvtColor_U0_full_n,
        ap_done => AXIvideo2Mat_U0_ap_done,
        ap_continue => AXIvideo2Mat_U0_ap_continue,
        ap_idle => AXIvideo2Mat_U0_ap_idle,
        ap_ready => AXIvideo2Mat_U0_ap_ready,
        start_out => AXIvideo2Mat_U0_start_out,
        start_write => AXIvideo2Mat_U0_start_write,
        src_TDATA => src_TDATA,
        src_TVALID => src_TVALID,
        src_TREADY => AXIvideo2Mat_U0_src_TREADY,
        src_TKEEP => src_TKEEP,
        src_TSTRB => src_TSTRB,
        src_TUSER => src_TUSER,
        src_TLAST => src_TLAST,
        src_TID => src_TID,
        src_TDEST => src_TDEST,
        img_rows_V_dout => srcImg_rows_V_c_dout,
        img_rows_V_empty_n => srcImg_rows_V_c_empty_n,
        img_rows_V_read => AXIvideo2Mat_U0_img_rows_V_read,
        img_cols_V_dout => srcImg_cols_V_c_dout,
        img_cols_V_empty_n => srcImg_cols_V_c_empty_n,
        img_cols_V_read => AXIvideo2Mat_U0_img_cols_V_read,
        img_data_stream_0_V_din => AXIvideo2Mat_U0_img_data_stream_0_V_din,
        img_data_stream_0_V_full_n => srcImg_data_stream_0_full_n,
        img_data_stream_0_V_write => AXIvideo2Mat_U0_img_data_stream_0_V_write,
        img_data_stream_1_V_din => AXIvideo2Mat_U0_img_data_stream_1_V_din,
        img_data_stream_1_V_full_n => srcImg_data_stream_1_full_n,
        img_data_stream_1_V_write => AXIvideo2Mat_U0_img_data_stream_1_V_write,
        img_data_stream_2_V_din => AXIvideo2Mat_U0_img_data_stream_2_V_din,
        img_data_stream_2_V_full_n => srcImg_data_stream_2_full_n,
        img_data_stream_2_V_write => AXIvideo2Mat_U0_img_data_stream_2_V_write,
        img_rows_V_out_din => AXIvideo2Mat_U0_img_rows_V_out_din,
        img_rows_V_out_full_n => srcImg_rows_V_c20_full_n,
        img_rows_V_out_write => AXIvideo2Mat_U0_img_rows_V_out_write,
        img_cols_V_out_din => AXIvideo2Mat_U0_img_cols_V_out_din,
        img_cols_V_out_full_n => srcImg_cols_V_c21_full_n,
        img_cols_V_out_write => AXIvideo2Mat_U0_img_cols_V_out_write);

    CvtColor_U0 : component CvtColor
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => CvtColor_U0_ap_start,
        start_full_n => start_for_Duplicate_U0_full_n,
        ap_done => CvtColor_U0_ap_done,
        ap_continue => CvtColor_U0_ap_continue,
        ap_idle => CvtColor_U0_ap_idle,
        ap_ready => CvtColor_U0_ap_ready,
        start_out => CvtColor_U0_start_out,
        start_write => CvtColor_U0_start_write,
        p_src_rows_V_dout => srcImg_rows_V_c20_dout,
        p_src_rows_V_empty_n => srcImg_rows_V_c20_empty_n,
        p_src_rows_V_read => CvtColor_U0_p_src_rows_V_read,
        p_src_cols_V_dout => srcImg_cols_V_c21_dout,
        p_src_cols_V_empty_n => srcImg_cols_V_c21_empty_n,
        p_src_cols_V_read => CvtColor_U0_p_src_cols_V_read,
        p_src_data_stream_0_V_dout => srcImg_data_stream_0_dout,
        p_src_data_stream_0_V_empty_n => srcImg_data_stream_0_empty_n,
        p_src_data_stream_0_V_read => CvtColor_U0_p_src_data_stream_0_V_read,
        p_src_data_stream_1_V_dout => srcImg_data_stream_1_dout,
        p_src_data_stream_1_V_empty_n => srcImg_data_stream_1_empty_n,
        p_src_data_stream_1_V_read => CvtColor_U0_p_src_data_stream_1_V_read,
        p_src_data_stream_2_V_dout => srcImg_data_stream_2_dout,
        p_src_data_stream_2_V_empty_n => srcImg_data_stream_2_empty_n,
        p_src_data_stream_2_V_read => CvtColor_U0_p_src_data_stream_2_V_read,
        p_dst_data_stream_V_din => CvtColor_U0_p_dst_data_stream_V_din,
        p_dst_data_stream_V_full_n => grayImg_data_stream_s_full_n,
        p_dst_data_stream_V_write => CvtColor_U0_p_dst_data_stream_V_write);

    Duplicate_U0 : component Duplicate
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Duplicate_U0_ap_start,
        start_full_n => Duplicate_U0_start_full_n,
        ap_done => Duplicate_U0_ap_done,
        ap_continue => Duplicate_U0_ap_continue,
        ap_idle => Duplicate_U0_ap_idle,
        ap_ready => Duplicate_U0_ap_ready,
        start_out => Duplicate_U0_start_out,
        start_write => Duplicate_U0_start_write,
        src_data_stream_V_dout => grayImg_data_stream_s_dout,
        src_data_stream_V_empty_n => grayImg_data_stream_s_empty_n,
        src_data_stream_V_read => Duplicate_U0_src_data_stream_V_read,
        dst1_data_stream_V_din => Duplicate_U0_dst1_data_stream_V_din,
        dst1_data_stream_V_full_n => split0_data_stream_0_full_n,
        dst1_data_stream_V_write => Duplicate_U0_dst1_data_stream_V_write,
        dst2_data_stream_V_din => Duplicate_U0_dst2_data_stream_V_din,
        dst2_data_stream_V_full_n => split1_data_stream_0_full_n,
        dst2_data_stream_V_write => Duplicate_U0_dst2_data_stream_V_write);

    Filter2D102_U0 : component Filter2D102
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Filter2D102_U0_ap_start,
        start_full_n => start_for_AddWeighted_U0_full_n,
        ap_done => Filter2D102_U0_ap_done,
        ap_continue => Filter2D102_U0_ap_continue,
        ap_idle => Filter2D102_U0_ap_idle,
        ap_ready => Filter2D102_U0_ap_ready,
        start_out => Filter2D102_U0_start_out,
        start_write => Filter2D102_U0_start_write,
        p_src_data_stream_V_dout => split0_data_stream_0_dout,
        p_src_data_stream_V_empty_n => split0_data_stream_0_empty_n,
        p_src_data_stream_V_read => Filter2D102_U0_p_src_data_stream_V_read,
        p_dst_data_stream_V_din => Filter2D102_U0_p_dst_data_stream_V_din,
        p_dst_data_stream_V_full_n => sobelImg_x_data_stre_full_n,
        p_dst_data_stream_V_write => Filter2D102_U0_p_dst_data_stream_V_write);

    Filter2D_U0 : component Filter2D
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Filter2D_U0_ap_start,
        ap_done => Filter2D_U0_ap_done,
        ap_continue => Filter2D_U0_ap_continue,
        ap_idle => Filter2D_U0_ap_idle,
        ap_ready => Filter2D_U0_ap_ready,
        p_src_data_stream_V_dout => split1_data_stream_0_dout,
        p_src_data_stream_V_empty_n => split1_data_stream_0_empty_n,
        p_src_data_stream_V_read => Filter2D_U0_p_src_data_stream_V_read,
        p_dst_data_stream_V_din => Filter2D_U0_p_dst_data_stream_V_din,
        p_dst_data_stream_V_full_n => sobelImg_y_data_stre_full_n,
        p_dst_data_stream_V_write => Filter2D_U0_p_dst_data_stream_V_write);

    AddWeighted_U0 : component AddWeighted
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => AddWeighted_U0_ap_start,
        ap_done => AddWeighted_U0_ap_done,
        ap_continue => AddWeighted_U0_ap_continue,
        ap_idle => AddWeighted_U0_ap_idle,
        ap_ready => AddWeighted_U0_ap_ready,
        src1_data_stream_V_dout => sobelImg_x_data_stre_dout,
        src1_data_stream_V_empty_n => sobelImg_x_data_stre_empty_n,
        src1_data_stream_V_read => AddWeighted_U0_src1_data_stream_V_read,
        src2_data_stream_V_dout => sobelImg_y_data_stre_dout,
        src2_data_stream_V_empty_n => sobelImg_y_data_stre_empty_n,
        src2_data_stream_V_read => AddWeighted_U0_src2_data_stream_V_read,
        dst_data_stream_V_din => AddWeighted_U0_dst_data_stream_V_din,
        dst_data_stream_V_full_n => sobelImg_data_stream_full_n,
        dst_data_stream_V_write => AddWeighted_U0_dst_data_stream_V_write);

    thresholding_U0 : component thresholding
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => thresholding_U0_ap_start,
        start_full_n => start_for_CvtColor_1_U0_full_n,
        ap_done => thresholding_U0_ap_done,
        ap_continue => thresholding_U0_ap_continue,
        ap_idle => thresholding_U0_ap_idle,
        ap_ready => thresholding_U0_ap_ready,
        start_out => thresholding_U0_start_out,
        start_write => thresholding_U0_start_write,
        dst_data_stream_V_din => thresholding_U0_dst_data_stream_V_din,
        dst_data_stream_V_full_n => thresholdImg_data_st_full_n,
        dst_data_stream_V_write => thresholding_U0_dst_data_stream_V_write,
        src_data_stream_V_dout => sobelImg_data_stream_dout,
        src_data_stream_V_empty_n => sobelImg_data_stream_empty_n,
        src_data_stream_V_read => thresholding_U0_src_data_stream_V_read,
        threshold_dout => threshold_c_dout,
        threshold_empty_n => threshold_c_empty_n,
        threshold_read => thresholding_U0_threshold_read);

    CvtColor_1_U0 : component CvtColor_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => CvtColor_1_U0_ap_start,
        start_full_n => start_for_Mat2AXIvideo_U0_full_n,
        ap_done => CvtColor_1_U0_ap_done,
        ap_continue => CvtColor_1_U0_ap_continue,
        ap_idle => CvtColor_1_U0_ap_idle,
        ap_ready => CvtColor_1_U0_ap_ready,
        start_out => CvtColor_1_U0_start_out,
        start_write => CvtColor_1_U0_start_write,
        p_src_data_stream_V_dout => thresholdImg_data_st_dout,
        p_src_data_stream_V_empty_n => thresholdImg_data_st_empty_n,
        p_src_data_stream_V_read => CvtColor_1_U0_p_src_data_stream_V_read,
        p_dst_data_stream_0_V_din => CvtColor_1_U0_p_dst_data_stream_0_V_din,
        p_dst_data_stream_0_V_full_n => rgbSobel_data_stream_full_n,
        p_dst_data_stream_0_V_write => CvtColor_1_U0_p_dst_data_stream_0_V_write,
        p_dst_data_stream_1_V_din => CvtColor_1_U0_p_dst_data_stream_1_V_din,
        p_dst_data_stream_1_V_full_n => rgbSobel_data_stream_1_full_n,
        p_dst_data_stream_1_V_write => CvtColor_1_U0_p_dst_data_stream_1_V_write,
        p_dst_data_stream_2_V_din => CvtColor_1_U0_p_dst_data_stream_2_V_din,
        p_dst_data_stream_2_V_full_n => rgbSobel_data_stream_2_full_n,
        p_dst_data_stream_2_V_write => CvtColor_1_U0_p_dst_data_stream_2_V_write);

    Mat2AXIvideo_U0 : component Mat2AXIvideo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Mat2AXIvideo_U0_ap_start,
        ap_done => Mat2AXIvideo_U0_ap_done,
        ap_continue => Mat2AXIvideo_U0_ap_continue,
        ap_idle => Mat2AXIvideo_U0_ap_idle,
        ap_ready => Mat2AXIvideo_U0_ap_ready,
        img_data_stream_0_V_dout => rgbSobel_data_stream_dout,
        img_data_stream_0_V_empty_n => rgbSobel_data_stream_empty_n,
        img_data_stream_0_V_read => Mat2AXIvideo_U0_img_data_stream_0_V_read,
        img_data_stream_1_V_dout => rgbSobel_data_stream_1_dout,
        img_data_stream_1_V_empty_n => rgbSobel_data_stream_1_empty_n,
        img_data_stream_1_V_read => Mat2AXIvideo_U0_img_data_stream_1_V_read,
        img_data_stream_2_V_dout => rgbSobel_data_stream_2_dout,
        img_data_stream_2_V_empty_n => rgbSobel_data_stream_2_empty_n,
        img_data_stream_2_V_read => Mat2AXIvideo_U0_img_data_stream_2_V_read,
        dst_TDATA => Mat2AXIvideo_U0_dst_TDATA,
        dst_TVALID => Mat2AXIvideo_U0_dst_TVALID,
        dst_TREADY => dst_TREADY,
        dst_TKEEP => Mat2AXIvideo_U0_dst_TKEEP,
        dst_TSTRB => Mat2AXIvideo_U0_dst_TSTRB,
        dst_TUSER => Mat2AXIvideo_U0_dst_TUSER,
        dst_TLAST => Mat2AXIvideo_U0_dst_TLAST,
        dst_TID => Mat2AXIvideo_U0_dst_TID,
        dst_TDEST => Mat2AXIvideo_U0_dst_TDEST);

    srcImg_rows_V_c_U : component fifo_w12_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc232_U0_srcImg_rows_V_out_din,
        if_full_n => srcImg_rows_V_c_full_n,
        if_write => Block_proc232_U0_srcImg_rows_V_out_write,
        if_dout => srcImg_rows_V_c_dout,
        if_empty_n => srcImg_rows_V_c_empty_n,
        if_read => AXIvideo2Mat_U0_img_rows_V_read);

    srcImg_cols_V_c_U : component fifo_w12_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc232_U0_srcImg_cols_V_out_din,
        if_full_n => srcImg_cols_V_c_full_n,
        if_write => Block_proc232_U0_srcImg_cols_V_out_write,
        if_dout => srcImg_cols_V_c_dout,
        if_empty_n => srcImg_cols_V_c_empty_n,
        if_read => AXIvideo2Mat_U0_img_cols_V_read);

    threshold_c_U : component fifo_w8_d7_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc232_U0_threshold_out_din,
        if_full_n => threshold_c_full_n,
        if_write => Block_proc232_U0_threshold_out_write,
        if_dout => threshold_c_dout,
        if_empty_n => threshold_c_empty_n,
        if_read => thresholding_U0_threshold_read);

    srcImg_data_stream_0_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_data_stream_0_V_din,
        if_full_n => srcImg_data_stream_0_full_n,
        if_write => AXIvideo2Mat_U0_img_data_stream_0_V_write,
        if_dout => srcImg_data_stream_0_dout,
        if_empty_n => srcImg_data_stream_0_empty_n,
        if_read => CvtColor_U0_p_src_data_stream_0_V_read);

    srcImg_data_stream_1_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_data_stream_1_V_din,
        if_full_n => srcImg_data_stream_1_full_n,
        if_write => AXIvideo2Mat_U0_img_data_stream_1_V_write,
        if_dout => srcImg_data_stream_1_dout,
        if_empty_n => srcImg_data_stream_1_empty_n,
        if_read => CvtColor_U0_p_src_data_stream_1_V_read);

    srcImg_data_stream_2_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_data_stream_2_V_din,
        if_full_n => srcImg_data_stream_2_full_n,
        if_write => AXIvideo2Mat_U0_img_data_stream_2_V_write,
        if_dout => srcImg_data_stream_2_dout,
        if_empty_n => srcImg_data_stream_2_empty_n,
        if_read => CvtColor_U0_p_src_data_stream_2_V_read);

    srcImg_rows_V_c20_U : component fifo_w12_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_rows_V_out_din,
        if_full_n => srcImg_rows_V_c20_full_n,
        if_write => AXIvideo2Mat_U0_img_rows_V_out_write,
        if_dout => srcImg_rows_V_c20_dout,
        if_empty_n => srcImg_rows_V_c20_empty_n,
        if_read => CvtColor_U0_p_src_rows_V_read);

    srcImg_cols_V_c21_U : component fifo_w12_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_cols_V_out_din,
        if_full_n => srcImg_cols_V_c21_full_n,
        if_write => AXIvideo2Mat_U0_img_cols_V_out_write,
        if_dout => srcImg_cols_V_c21_dout,
        if_empty_n => srcImg_cols_V_c21_empty_n,
        if_read => CvtColor_U0_p_src_cols_V_read);

    grayImg_data_stream_s_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => CvtColor_U0_p_dst_data_stream_V_din,
        if_full_n => grayImg_data_stream_s_full_n,
        if_write => CvtColor_U0_p_dst_data_stream_V_write,
        if_dout => grayImg_data_stream_s_dout,
        if_empty_n => grayImg_data_stream_s_empty_n,
        if_read => Duplicate_U0_src_data_stream_V_read);

    split0_data_stream_0_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Duplicate_U0_dst1_data_stream_V_din,
        if_full_n => split0_data_stream_0_full_n,
        if_write => Duplicate_U0_dst1_data_stream_V_write,
        if_dout => split0_data_stream_0_dout,
        if_empty_n => split0_data_stream_0_empty_n,
        if_read => Filter2D102_U0_p_src_data_stream_V_read);

    split1_data_stream_0_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Duplicate_U0_dst2_data_stream_V_din,
        if_full_n => split1_data_stream_0_full_n,
        if_write => Duplicate_U0_dst2_data_stream_V_write,
        if_dout => split1_data_stream_0_dout,
        if_empty_n => split1_data_stream_0_empty_n,
        if_read => Filter2D_U0_p_src_data_stream_V_read);

    sobelImg_x_data_stre_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Filter2D102_U0_p_dst_data_stream_V_din,
        if_full_n => sobelImg_x_data_stre_full_n,
        if_write => Filter2D102_U0_p_dst_data_stream_V_write,
        if_dout => sobelImg_x_data_stre_dout,
        if_empty_n => sobelImg_x_data_stre_empty_n,
        if_read => AddWeighted_U0_src1_data_stream_V_read);

    sobelImg_y_data_stre_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Filter2D_U0_p_dst_data_stream_V_din,
        if_full_n => sobelImg_y_data_stre_full_n,
        if_write => Filter2D_U0_p_dst_data_stream_V_write,
        if_dout => sobelImg_y_data_stre_dout,
        if_empty_n => sobelImg_y_data_stre_empty_n,
        if_read => AddWeighted_U0_src2_data_stream_V_read);

    sobelImg_data_stream_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AddWeighted_U0_dst_data_stream_V_din,
        if_full_n => sobelImg_data_stream_full_n,
        if_write => AddWeighted_U0_dst_data_stream_V_write,
        if_dout => sobelImg_data_stream_dout,
        if_empty_n => sobelImg_data_stream_empty_n,
        if_read => thresholding_U0_src_data_stream_V_read);

    thresholdImg_data_st_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => thresholding_U0_dst_data_stream_V_din,
        if_full_n => thresholdImg_data_st_full_n,
        if_write => thresholding_U0_dst_data_stream_V_write,
        if_dout => thresholdImg_data_st_dout,
        if_empty_n => thresholdImg_data_st_empty_n,
        if_read => CvtColor_1_U0_p_src_data_stream_V_read);

    rgbSobel_data_stream_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => CvtColor_1_U0_p_dst_data_stream_0_V_din,
        if_full_n => rgbSobel_data_stream_full_n,
        if_write => CvtColor_1_U0_p_dst_data_stream_0_V_write,
        if_dout => rgbSobel_data_stream_dout,
        if_empty_n => rgbSobel_data_stream_empty_n,
        if_read => Mat2AXIvideo_U0_img_data_stream_0_V_read);

    rgbSobel_data_stream_1_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => CvtColor_1_U0_p_dst_data_stream_1_V_din,
        if_full_n => rgbSobel_data_stream_1_full_n,
        if_write => CvtColor_1_U0_p_dst_data_stream_1_V_write,
        if_dout => rgbSobel_data_stream_1_dout,
        if_empty_n => rgbSobel_data_stream_1_empty_n,
        if_read => Mat2AXIvideo_U0_img_data_stream_1_V_read);

    rgbSobel_data_stream_2_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => CvtColor_1_U0_p_dst_data_stream_2_V_din,
        if_full_n => rgbSobel_data_stream_2_full_n,
        if_write => CvtColor_1_U0_p_dst_data_stream_2_V_write,
        if_dout => rgbSobel_data_stream_2_dout,
        if_empty_n => rgbSobel_data_stream_2_empty_n,
        if_read => Mat2AXIvideo_U0_img_data_stream_2_V_read);

    start_for_threshopcA_U : component start_for_threshopcA
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_thresholding_U0_din,
        if_full_n => start_for_thresholding_U0_full_n,
        if_write => Block_proc232_U0_start_write,
        if_dout => start_for_thresholding_U0_dout,
        if_empty_n => start_for_thresholding_U0_empty_n,
        if_read => thresholding_U0_ap_ready);

    start_for_CvtColoqcK_U : component start_for_CvtColoqcK
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_CvtColor_U0_din,
        if_full_n => start_for_CvtColor_U0_full_n,
        if_write => AXIvideo2Mat_U0_start_write,
        if_dout => start_for_CvtColor_U0_dout,
        if_empty_n => start_for_CvtColor_U0_empty_n,
        if_read => CvtColor_U0_ap_ready);

    start_for_DuplicarcU_U : component start_for_DuplicarcU
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Duplicate_U0_din,
        if_full_n => start_for_Duplicate_U0_full_n,
        if_write => CvtColor_U0_start_write,
        if_dout => start_for_Duplicate_U0_dout,
        if_empty_n => start_for_Duplicate_U0_empty_n,
        if_read => Duplicate_U0_ap_ready);

    start_for_Filter2sc4_U : component start_for_Filter2sc4
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Filter2D102_U0_din,
        if_full_n => start_for_Filter2D102_U0_full_n,
        if_write => Duplicate_U0_start_write,
        if_dout => start_for_Filter2D102_U0_dout,
        if_empty_n => start_for_Filter2D102_U0_empty_n,
        if_read => Filter2D102_U0_ap_ready);

    start_for_Filter2tde_U : component start_for_Filter2tde
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Filter2D_U0_din,
        if_full_n => start_for_Filter2D_U0_full_n,
        if_write => Duplicate_U0_start_write,
        if_dout => start_for_Filter2D_U0_dout,
        if_empty_n => start_for_Filter2D_U0_empty_n,
        if_read => Filter2D_U0_ap_ready);

    start_for_AddWeigudo_U : component start_for_AddWeigudo
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_AddWeighted_U0_din,
        if_full_n => start_for_AddWeighted_U0_full_n,
        if_write => Filter2D102_U0_start_write,
        if_dout => start_for_AddWeighted_U0_dout,
        if_empty_n => start_for_AddWeighted_U0_empty_n,
        if_read => AddWeighted_U0_ap_ready);

    start_for_CvtColovdy_U : component start_for_CvtColovdy
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_CvtColor_1_U0_din,
        if_full_n => start_for_CvtColor_1_U0_full_n,
        if_write => thresholding_U0_start_write,
        if_dout => start_for_CvtColor_1_U0_dout,
        if_empty_n => start_for_CvtColor_1_U0_empty_n,
        if_read => CvtColor_1_U0_ap_ready);

    start_for_Mat2AXIwdI_U : component start_for_Mat2AXIwdI
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Mat2AXIvideo_U0_din,
        if_full_n => start_for_Mat2AXIvideo_U0_full_n,
        if_write => CvtColor_1_U0_start_write,
        if_dout => start_for_Mat2AXIvideo_U0_dout,
        if_empty_n => start_for_Mat2AXIvideo_U0_empty_n,
        if_read => Mat2AXIvideo_U0_ap_ready);




    AXIvideo2Mat_U0_ap_continue <= ap_const_logic_1;
    AXIvideo2Mat_U0_ap_start <= ap_const_logic_1;
    AddWeighted_U0_ap_continue <= ap_const_logic_1;
    AddWeighted_U0_ap_start <= start_for_AddWeighted_U0_empty_n;
    AddWeighted_U0_start_full_n <= ap_const_logic_1;
    AddWeighted_U0_start_write <= ap_const_logic_0;
    Block_proc232_U0_ap_continue <= ap_const_logic_1;
    Block_proc232_U0_ap_start <= ap_const_logic_1;
    CvtColor_1_U0_ap_continue <= ap_const_logic_1;
    CvtColor_1_U0_ap_start <= start_for_CvtColor_1_U0_empty_n;
    CvtColor_U0_ap_continue <= ap_const_logic_1;
    CvtColor_U0_ap_start <= start_for_CvtColor_U0_empty_n;
    Duplicate_U0_ap_continue <= ap_const_logic_1;
    Duplicate_U0_ap_start <= start_for_Duplicate_U0_empty_n;
    Duplicate_U0_start_full_n <= (start_for_Filter2D_U0_full_n and start_for_Filter2D102_U0_full_n);
    Filter2D102_U0_ap_continue <= ap_const_logic_1;
    Filter2D102_U0_ap_start <= start_for_Filter2D102_U0_empty_n;
    Filter2D_U0_ap_continue <= ap_const_logic_1;
    Filter2D_U0_ap_start <= start_for_Filter2D_U0_empty_n;
    Filter2D_U0_start_full_n <= ap_const_logic_1;
    Filter2D_U0_start_write <= ap_const_logic_0;
    Mat2AXIvideo_U0_ap_continue <= ap_const_logic_1;
    Mat2AXIvideo_U0_ap_start <= start_for_Mat2AXIvideo_U0_empty_n;
    Mat2AXIvideo_U0_start_full_n <= ap_const_logic_1;
    Mat2AXIvideo_U0_start_write <= ap_const_logic_0;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_0;
    dst_TDATA <= Mat2AXIvideo_U0_dst_TDATA;
    dst_TDEST <= Mat2AXIvideo_U0_dst_TDEST;
    dst_TID <= Mat2AXIvideo_U0_dst_TID;
    dst_TKEEP <= Mat2AXIvideo_U0_dst_TKEEP;
    dst_TLAST <= Mat2AXIvideo_U0_dst_TLAST;
    dst_TSTRB <= Mat2AXIvideo_U0_dst_TSTRB;
    dst_TUSER <= Mat2AXIvideo_U0_dst_TUSER;
    dst_TVALID <= Mat2AXIvideo_U0_dst_TVALID;
    src_TREADY <= AXIvideo2Mat_U0_src_TREADY;
    start_for_AddWeighted_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_CvtColor_1_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_CvtColor_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Duplicate_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Filter2D102_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Filter2D_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Mat2AXIvideo_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_thresholding_U0_din <= (0=>ap_const_logic_1, others=>'-');
    thresholding_U0_ap_continue <= ap_const_logic_1;
    thresholding_U0_ap_start <= start_for_thresholding_U0_empty_n;
end behav;
